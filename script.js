

// Условия


// if (1) {
//     console.log("верно")
// } else {
//     console.log('неверно')
// }


// let num = 50

// if (num < 49) {
//     console.log('неверно')
// } else if (num > 100) {
//     console.log('много')
// } else {
//     console.log('навена')
// };



// (num == 50) ? console.log('ok') : console.log('no');


// switch (num) {
//     case num < 49:
//         console.log('неверно');
//         break;
//     case num > 100:
//         console.log('много');
//         break;
//     case num > 80:
//         console.log('много ppc');
//         break;
//     case 50: //num == 50: Данная запись не будет верна , здесь при сравнении нужно писать именно значение
//     console.log('навена');
//     break;
//     default: 
//         console.log('something wrong');
//         break;// Эта директива нужна, чтобы всё подряд не выполнялось и останавливалось при достижении цели или наоборот
// }

















// Циклы






// Цикл while записывается с помощью ключевого слова while. Условие (num < 55)- пока это условие не будет выполнено, цикл будет выполняться
//далее идет тело цикла {} в нём мы записываем действия которые будет выполнять цикл итерация за итерацией, пока условие не будет выполнено

// let num = 50;

// while (num < 55) {
//     console.log(num);
//     num++; 
// }






// Цикл do while дословно переводится как делай , пока . Сначала цикл выполняет итерацию, потом проходит проверку условия.

// do {
//     console.log(num);
//     num++;
// }
// while (num < 55) 

// Оба этих цикла необходимы только тогда, когда мы хотим сначала что-то сделать, и только потом проверить условие



// Цикл For

// Первым значением будет переменная или что-нибудь другое. Вторым значением будет условие, при котором наш цикл остановит работу
// Третье условие - это ,что будет происходить каждую итерацию цикла для достижения его цели.
// В фигурных скобках мы записываем какое-то действие цикла. Например вывод в консоль результата каждой итерации

// for (let i = 1; i < 8; i++) {
//     if (i == 6) {
//         break;
//     }
//     console.log(i)
// }

//Также здесь мы использовали директиву break с условием, когда i = 6 , цикл остановится. То есть эта директива заверщшает цикл при достижении заданого условия
// Есть директива continue , которая просто пропускает значение, которое установили и приступает к следующей итерации.

// При работе с циклами необходимо следить за тем, чтобы наши значния могли быть преобразованны в логический контекст .Иначе мы рискуем тем,
//что цикл будет бесконечным.





// Функции

// Начнем с названия. Название функции должно содержать то, что она должна делать и просто
// синтаксис таков. Через ключевое слово , далее сразу название фунции , далее ее аргументы
//В круглых скобках . Далеее в фигурных скобках тело функции, а именно, что она делает

// let num = 20

// function showFirstMassage (text) { 
//     alert(text)
//     num = 10
// }

// showFirstMassage('Hello world');
// console.log(num) // так вызывается фунция, она может быть вызвана бесконечное количество раз
// с разными аргументами. Собственно для этого они и созданы,чтобы не писать код тысячи раз

// Если мы будем объявлять что-то внутри функции, то снаружи она видна не будет. Однако, если она будет задана
// до начала функции , а в функции мы поменяем ее значение, то она выйдет с новым значением
// Также, если мы объявим переменную с таким-же именем в функции, то наша глобальная переменная будет игнорироваться, так как 
// сначала функция проверяет свою область видимости, и только если не находит то, к чему обращается начинает поуровнево искать нужную переменную




// Ниже мы работаем с function Declaration. В данном случае, мы можем выполнять функции еще до того, как до них дойдет код. То есть в любом месте кода.



// function calc(a,b) {
//     return(a + b)
// }

// console.log (calc(4,9));
// console.log (calc(1,3));

// function retVar() {
//     let num = 50;
//     return num;
// }

// let anotherNum = retVar();
// console.log(anotherNum); //  С помощью команды return мы возвращаем значение переменной внутри функции к глобальной зоне видимости 




// Прищло время поговорить о function Expression. В этом случае мы функцию присваиваем переменной и отличается она тем, что вызвать ее выполнение мы можем 
// только после объявления , то есть ниже по коду, нежели мы создали.


// let calc = function(a,b) {
//     return (a + b);
// }

// console.log(calc(2,9));



// Стрелочные функции 


// let calc = (a,b) => a+b // в круглых скобках мы пишем аргументы, далее знак стрелки,что значит далее функция, далее то, что делает функция

// console.log(calc(2,7))
// Стрелочную функцию можно использовать не во всех случаях, так как у нее нет контекста вызова.





// Пример замыкания

// function firstTime() {
//     let counter = 0 ;
//     const myFunc = function () {
//         counter = counter + 1;
//         return counter;
//     }
//     return myFunc;
// }

// const incr = firstTime();

// const c1 = incr(); // здесь мы вызываем посредством круглых скобок функцию, относящуюся к переменной, она в свою очередь запускает функцию firstTime
// const c2 = incr();// она в свою очередь вызывает myFunc . При каждом полученом результате она сохраняет полученое значение и соответственно 
// const c3 = incr();// получаем +1 , каждый раз, когда вызываем её раз за разом. 

// console.log(c1 , c2, c3 ) //Результат будет 1,2,3.
// Замыкание - это коллекция всех переменных, доступных функции . При этом, если необходимую переменную в своем теле функция не находит, то она начинает искать
// поуровнево , вплоть до глобальной , если же не находит, то значением будет undefined



// Свойства и методы строк и чисел 

// методы - это вспомогательные функции
//Свойства - это вспомогательные значения

let str = 'test'
console.log(str.length); // обращение к свойству идет через точку. Свойство length дало нам количество символов в слове текст

console.log(str.toUpperCase()); // обращение к методу тоже через точку, но вконце обязательно круглые скобки

console.log(str.toLowerCase());

let twelve = '12.2px'

// console.log(Math.round(twelve)); // преобразовали в число, и привели к целому значению
console.log(parseInt(twelve)); // привели к числу и к целому числу
console.log(parseFloat(twelve));// привели к числу и к десятичному числу.